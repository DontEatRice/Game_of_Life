{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.c9f23964.js","sourceRoot":"..\\src","sourcesContent":["console.log(\"I'm working!\")\r\nconsole.log(\"Hot reload\")\r\nconst NUMBER_OF_CELLS = 15*15;\r\n\r\nenum Status {\r\n    DEAD, ALIVE\r\n}\r\n\r\nclass Cell {\r\n    private body: HTMLDivElement\r\n    private _status: Status\r\n    private toggleStatus = () => {\r\n        this.body.classList.toggle('dead')\r\n        this.body.classList.toggle('alive')\r\n        this._status = this.status\r\n    }\r\n\r\n    constructor(body: HTMLDivElement) {\r\n        this.body = body;\r\n        this._status = Status.DEAD;\r\n        this.enableOnClick()\r\n    }\r\n\r\n    static forEach(cells: Cell[][], cb: (cell: Cell) => void) {\r\n        cells.forEach(row => row.forEach(cb))\r\n    }\r\n\r\n    static applyStatusChange(cells: Cell[][]) {\r\n        this.forEach(cells, cell => {\r\n            if (cell._status != cell.status)\r\n                cell.toggleStatus()\r\n        })\r\n    }\r\n\r\n    // Cell[y][x]\r\n    static isAlive(cells: Cell[][], x: number, y: number) {\r\n        if (y < 0)\r\n            y = cells.length-1\r\n        else if (y > cells.length-1)\r\n            y = 0\r\n        \r\n        if (x < 0)\r\n            x = cells[y].length-1\r\n        else if (x > cells[y].length-1)\r\n            x = 0\r\n\r\n        return cells[y][x].status == Status.ALIVE ? 1 : 0;\r\n    }\r\n\r\n    get status() {\r\n        return this.body.classList.contains('dead') ? Status.DEAD : Status.ALIVE;\r\n    }\r\n\r\n    enableOnClick() {\r\n        this.body.addEventListener('click', this.toggleStatus)\r\n    }\r\n\r\n    disableOnClick() {\r\n        this.body.removeEventListener('click', this.toggleStatus)\r\n    }\r\n\r\n    set status(s: Status) {\r\n        this._status = s;\r\n    }\r\n}\r\n\r\nclass Game {\r\n    private _cells: Cell[][]\r\n    private intervalId?: number\r\n    private _isRunning: boolean\r\n\r\n    constructor(cells: Cell[][]) {\r\n        this._cells = cells;\r\n        this._isRunning = false;\r\n    }\r\n\r\n    run(stayAliveCond: number[], resurrectionCond: number[], interval: number) {\r\n        this.intervalId = setInterval(() => {\r\n            const cells = this._cells;\r\n            for(let y = 0; y < cells.length; y++) {\r\n                for(let x = 0; x < cells[y].length; x++) {\r\n                    let neighboursAlive = 0;\r\n                    const currentCell = cells[y][x]\r\n                    // top\r\n                    neighboursAlive += Cell.isAlive(cells, x-1, y+1) + Cell.isAlive(cells, x, y+1) + Cell.isAlive(cells, x+1, y+1)\r\n                    // middle\r\n                    neighboursAlive += Cell.isAlive(cells, x-1, y) + Cell.isAlive(cells, x+1, y)\r\n                    // bottom\r\n                    neighboursAlive += Cell.isAlive(cells, x-1, y-1) + Cell.isAlive(cells, x, y-1) + Cell.isAlive(cells, x+1, y-1)\r\n                    \r\n                    if (currentCell.status == Status.ALIVE && !stayAliveCond.includes(neighboursAlive))\r\n                    currentCell.status = Status.DEAD\r\n                    else if (currentCell.status == Status.DEAD && resurrectionCond.includes(neighboursAlive))\r\n                    currentCell.status = Status.ALIVE\r\n                }\r\n            }\r\n            Cell.applyStatusChange(cells)\r\n        }, interval)\r\n        this._isRunning = true;\r\n    }\r\n\r\n    stop() {\r\n        if (this.intervalId != undefined){\r\n            clearInterval(this.intervalId)\r\n            this.intervalId = undefined;\r\n            this._isRunning = false;\r\n        }\r\n    }\r\n\r\n    get cells() {\r\n        return this._cells;\r\n    }\r\n\r\n    isRunning() {\r\n        return this._isRunning\r\n    }\r\n}\r\n\r\n\r\nconst generateCells = (): Cell[][] => {\r\n    const cells: Cell[][] = []\r\n    const board = document.getElementById('board')\r\n    const nCellsSqrt = Math.sqrt(NUMBER_OF_CELLS)\r\n    for(let y = 0; y < nCellsSqrt; y++) {\r\n        const level: Cell[] = [] \r\n        for(let x = 0; x < nCellsSqrt; x++) {\r\n            const deadCell = document.createElement('div')\r\n            deadCell.classList.add('cell')\r\n            deadCell.classList.add('dead')\r\n            board?.appendChild(deadCell)\r\n            level.push(new Cell(deadCell));\r\n        }\r\n        cells.push(level)\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\nwindow.onload = () => {\r\n    const matrix = generateCells()\r\n    const game = new Game(matrix);\r\n    const gameStatus = document.querySelector('span.gameStatus') as HTMLSpanElement\r\n\r\n    document.getElementById('runBtn')?.addEventListener('click', (_) => {\r\n        console.log('clicked')\r\n        Cell.forEach(matrix, cell => cell.disableOnClick())\r\n        const formula = (document.getElementById('formulaInput') as HTMLInputElement).value;\r\n        const interval = (document.getElementById('tickTimeInput') as HTMLInputElement).value.replace(',', '.')\r\n        const formulaSplitted = formula.split('/');\r\n        const stayAliveCond = formulaSplitted[0].split('').map(s => parseInt(s))\r\n        const resurrectCond = formulaSplitted[1].split('').map(s => parseInt(s))\r\n        game.run(stayAliveCond, resurrectCond, parseFloat(interval)*1000)\r\n        gameStatus.innerText = 'Running'\r\n    })\r\n\r\n    document.getElementById('stopBtn')?.addEventListener('click', (_) => {\r\n        game.stop()\r\n        Cell.forEach(matrix, cell => cell.enableOnClick())\r\n        gameStatus.innerText = ''\r\n    })\r\n\r\n    document.getElementById('clearBtn')?.addEventListener('click', (_) => {\r\n        if (!game.isRunning()) {\r\n            Cell.forEach(matrix, cell => cell.status = Status.DEAD)\r\n            Cell.applyStatusChange(matrix)\r\n        }\r\n    })\r\n}"]}